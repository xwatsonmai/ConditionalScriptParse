// Code generated by goyacc -o ms.go -p ms ms.y. DO NOT EDIT.

//line ms.y:2
package parse

import __yyfmt__ "fmt"

//line ms.y:2

import (
	"math/big"
	"strings"
)

func setResult(l msLexer, v bool) {
	l.(*exprLex).result = v
}

//line ms.y:13
type msSymType struct {
	yys      int
	param    *big.Rat
	strParam string
	check    bool
	symbol   string
	array    []*big.Rat
}

const PARAM = 57346
const STRPARAM = 57347
const NOT = 57348
const AND = 57349
const OR = 57350
const GE = 57351
const LE = 57352
const IN = 57353

var msToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'>'",
	"'<'",
	"'='",
	"'!'",
	"'('",
	"')'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"PARAM",
	"STRPARAM",
	"NOT",
	"AND",
	"OR",
	"GE",
	"LE",
	"IN",
}

var msStatenames = [...]string{}

const msEofCode = 1
const msErrCode = 2
const msInitialStackSize = 16

//line ms.y:203

//line yacctab:1
var msExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const msPrivate = 57344

const msLast = 87

var msAct = [...]int8{
	9, 7, 15, 14, 31, 12, 22, 23, 24, 28,
	30, 13, 57, 36, 32, 39, 40, 38, 27, 33,
	31, 25, 26, 51, 45, 46, 47, 48, 49, 50,
	32, 66, 54, 56, 37, 33, 22, 23, 24, 60,
	16, 53, 62, 63, 61, 3, 58, 59, 27, 19,
	21, 25, 26, 51, 29, 55, 64, 53, 65, 18,
	17, 20, 14, 41, 42, 43, 44, 4, 8, 1,
	8, 11, 52, 11, 16, 14, 16, 14, 37, 34,
	35, 11, 6, 5, 16, 2, 10,
}

var msPact = [...]int16{
	60, -1000, -1000, 43, 62, -1000, -1000, 2, 62, -2,
	69, 70, 7, 3, -1000, -1000, -1000, 62, 62, 62,
	62, -1000, 70, 70, 70, 70, 70, 70, 14, 63,
	32, 47, 47, 4, 26, 26, -1000, 70, -12, 26,
	26, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 47, -1000, 47, 3, 3,
	48, -1000, -1000, -1000, 44, 22, -1000,
}

var msPgo = [...]int8{
	0, 1, 86, 11, 2, 0, 5, 85, 45, 83,
	82, 69,
}

var msR1 = [...]int8{
	0, 11, 7, 7, 7, 7, 7, 7, 8, 8,
	10, 10, 10, 5, 5, 5, 6, 9, 9, 9,
	9, 9, 9, 9, 1, 1, 2, 2, 2, 3,
	3, 3, 4, 4,
}

var msR2 = [...]int8{
	0, 1, 1, 2, 3, 3, 3, 3, 1, 1,
	3, 3, 5, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 3, 1, 2, 1, 3, 3, 1,
	3, 3, 1, 3,
}

var msChk = [...]int16{
	-1000, -11, -7, -8, 7, -9, -10, -1, 8, -5,
	-2, 11, -6, -3, 15, -4, 14, 17, 16, 6,
	18, -8, 4, 5, 6, 19, 20, 16, -5, -8,
	-1, 6, 16, 21, 10, 11, -1, 8, 10, 12,
	13, -8, -8, -8, -8, -1, -1, -1, -1, -1,
	-1, 9, 9, 9, -5, 8, -5, 8, -3, -3,
	-1, -6, -4, -4, -5, -5, 9,
}

var msDef = [...]int8{
	0, -2, 1, 2, 0, 8, 9, 0, 0, 0,
	24, 0, 13, 26, 16, 29, 32, 0, 0, 0,
	0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 25, 0, 0, 0,
	0, 4, 5, 6, 7, 17, 18, 19, 20, 21,
	22, 15, 23, 33, 10, 0, 11, 0, 27, 28,
	0, 14, 30, 31, 0, 0, 12,
}

var msTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 7, 3, 3, 3, 3, 3, 3,
	8, 9, 12, 10, 3, 11, 3, 13, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	5, 6, 4,
}

var msTok2 = [...]int8{
	2, 3, 14, 15, 16, 17, 18, 19, 20, 21,
}

var msTok3 = [...]int8{
	0,
}

var msErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	msDebug        = 0
	msErrorVerbose = false
)

type msLexer interface {
	Lex(lval *msSymType) int
	Error(s string)
}

type msParser interface {
	Parse(msLexer) int
	Lookahead() int
}

type msParserImpl struct {
	lval  msSymType
	stack [msInitialStackSize]msSymType
	char  int
}

func (p *msParserImpl) Lookahead() int {
	return p.char
}

func msNewParser() msParser {
	return &msParserImpl{}
}

const msFlag = -1000

func msTokname(c int) string {
	if c >= 1 && c-1 < len(msToknames) {
		if msToknames[c-1] != "" {
			return msToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func msStatname(s int) string {
	if s >= 0 && s < len(msStatenames) {
		if msStatenames[s] != "" {
			return msStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func msErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !msErrorVerbose {
		return "syntax error"
	}

	for _, e := range msErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + msTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(msPact[state])
	for tok := TOKSTART; tok-1 < len(msToknames); tok++ {
		if n := base + tok; n >= 0 && n < msLast && int(msChk[int(msAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if msDef[state] == -2 {
		i := 0
		for msExca[i] != -1 || int(msExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; msExca[i] >= 0; i += 2 {
			tok := int(msExca[i])
			if tok < TOKSTART || msExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if msExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += msTokname(tok)
	}
	return res
}

func mslex1(lex msLexer, lval *msSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(msTok1[0])
		goto out
	}
	if char < len(msTok1) {
		token = int(msTok1[char])
		goto out
	}
	if char >= msPrivate {
		if char < msPrivate+len(msTok2) {
			token = int(msTok2[char-msPrivate])
			goto out
		}
	}
	for i := 0; i < len(msTok3); i += 2 {
		token = int(msTok3[i+0])
		if token == char {
			token = int(msTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(msTok2[1]) /* unknown char */
	}
	if msDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", msTokname(token), uint(char))
	}
	return char, token
}

func msParse(mslex msLexer) int {
	return msNewParser().Parse(mslex)
}

func (msrcvr *msParserImpl) Parse(mslex msLexer) int {
	var msn int
	var msVAL msSymType
	var msDollar []msSymType
	_ = msDollar // silence set and not used
	msS := msrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	msstate := 0
	msrcvr.char = -1
	mstoken := -1 // msrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		msstate = -1
		msrcvr.char = -1
		mstoken = -1
	}()
	msp := -1
	goto msstack

ret0:
	return 0

ret1:
	return 1

msstack:
	/* put a state and value onto the stack */
	if msDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", msTokname(mstoken), msStatname(msstate))
	}

	msp++
	if msp >= len(msS) {
		nyys := make([]msSymType, len(msS)*2)
		copy(nyys, msS)
		msS = nyys
	}
	msS[msp] = msVAL
	msS[msp].yys = msstate

msnewstate:
	msn = int(msPact[msstate])
	if msn <= msFlag {
		goto msdefault /* simple state */
	}
	if msrcvr.char < 0 {
		msrcvr.char, mstoken = mslex1(mslex, &msrcvr.lval)
	}
	msn += mstoken
	if msn < 0 || msn >= msLast {
		goto msdefault
	}
	msn = int(msAct[msn])
	if int(msChk[msn]) == mstoken { /* valid shift */
		msrcvr.char = -1
		mstoken = -1
		msVAL = msrcvr.lval
		msstate = msn
		if Errflag > 0 {
			Errflag--
		}
		goto msstack
	}

msdefault:
	/* default state action */
	msn = int(msDef[msstate])
	if msn == -2 {
		if msrcvr.char < 0 {
			msrcvr.char, mstoken = mslex1(mslex, &msrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if msExca[xi+0] == -1 && int(msExca[xi+1]) == msstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			msn = int(msExca[xi+0])
			if msn < 0 || msn == mstoken {
				break
			}
		}
		msn = int(msExca[xi+1])
		if msn < 0 {
			goto ret0
		}
	}
	if msn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mslex.Error(msErrorMessage(msstate, mstoken))
			Nerrs++
			if msDebug >= 1 {
				__yyfmt__.Printf("%s", msStatname(msstate))
				__yyfmt__.Printf(" saw %s\n", msTokname(mstoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for msp >= 0 {
				msn = int(msPact[msS[msp].yys]) + msErrCode
				if msn >= 0 && msn < msLast {
					msstate = int(msAct[msn]) /* simulate a shift of "error" */
					if int(msChk[msstate]) == msErrCode {
						goto msstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if msDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", msS[msp].yys)
				}
				msp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if msDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", msTokname(mstoken))
			}
			if mstoken == msEofCode {
				goto ret1
			}
			msrcvr.char = -1
			mstoken = -1
			goto msnewstate /* try again in the same state */
		}
	}

	/* reduction by production msn */
	if msDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", msn, msStatname(msstate))
	}

	msnt := msn
	mspt := msp
	_ = mspt // guard against "declared and not used"

	msp -= int(msR2[msn])
	// msp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if msp+1 >= len(msS) {
		nyys := make([]msSymType, len(msS)*2)
		copy(nyys, msS)
		msS = nyys
	}
	msVAL = msS[msp+1]

	/* consult goto table to find next state */
	msn = int(msR1[msn])
	msg := int(msPgo[msn])
	msj := msg + msS[msp].yys + 1

	if msj >= msLast {
		msstate = int(msAct[msg])
	} else {
		msstate = int(msAct[msj])
		if int(msChk[msstate]) != -msn {
			msstate = int(msAct[msg])
		}
	}
	// dummy call; replaced with literal code
	switch msnt {

	case 1:
		msDollar = msS[mspt-1 : mspt+1]
//line ms.y:33
		{
			setResult(mslex, msDollar[1].check)
		}
	case 2:
		msDollar = msS[mspt-1 : mspt+1]
//line ms.y:38
		{
			msVAL.check = msDollar[1].check
		}
	case 3:
		msDollar = msS[mspt-2 : mspt+1]
//line ms.y:42
		{
			msVAL.check = !msDollar[2].check
		}
	case 4:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:46
		{
			msVAL.check = msDollar[1].check && msDollar[3].check
		}
	case 5:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:50
		{
			msVAL.check = msDollar[1].check != msDollar[3].check
		}
	case 6:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:54
		{
			msVAL.check = msDollar[1].check == msDollar[3].check
		}
	case 7:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:58
		{
			msVAL.check = msDollar[1].check || msDollar[3].check
		}
	case 8:
		msDollar = msS[mspt-1 : mspt+1]
//line ms.y:63
		{
			msVAL.check = msDollar[1].check
		}
	case 9:
		msDollar = msS[mspt-1 : mspt+1]
//line ms.y:67
		{
			msVAL.check = msDollar[1].check
		}
	case 10:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:72
		{
			msVAL.check = msDollar[1].strParam == msDollar[3].strParam
		}
	case 11:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:76
		{
			msVAL.check = msDollar[1].strParam != msDollar[3].strParam
		}
	case 12:
		msDollar = msS[mspt-5 : mspt+1]
//line ms.y:80
		{
			if strings.Index(msDollar[4].strParam, msDollar[1].strParam) != -1 {
				msVAL.check = true
			} else {
				msVAL.check = false
			}
		}
	case 13:
		msDollar = msS[mspt-1 : mspt+1]
//line ms.y:89
		{
			msVAL.strParam = msDollar[1].strParam
		}
	case 14:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:93
		{
			msVAL.strParam = msDollar[1].strParam + msDollar[3].strParam
		}
	case 15:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:97
		{
			msVAL.strParam = msDollar[2].strParam
		}
	case 17:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:104
		{
			if msDollar[1].param.Cmp(msDollar[3].param) == 1 {
				msVAL.check = true
			} else {
				msVAL.check = false
			}
		}
	case 18:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:112
		{
			if msDollar[1].param.Cmp(msDollar[3].param) == -1 {
				msVAL.check = true
			} else {
				msVAL.check = false
			}
		}
	case 19:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:120
		{
			if msDollar[1].param.Cmp(msDollar[3].param) == 0 {
				msVAL.check = true
			} else {
				msVAL.check = false
			}
		}
	case 20:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:128
		{
			check := msDollar[1].param.Cmp(msDollar[3].param)
			if check == 1 || check == 0 {
				msVAL.check = true
			} else {
				msVAL.check = false
			}
		}
	case 21:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:137
		{
			check := msDollar[1].param.Cmp(msDollar[3].param)
			if check == -1 || check == 0 {
				msVAL.check = true
			} else {
				msVAL.check = false
			}
		}
	case 22:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:146
		{
			if msDollar[1].param.Cmp(msDollar[3].param) != 0 {
				msVAL.check = true
			} else {
				msVAL.check = false
			}
		}
	case 23:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:167
		{
			msVAL.check = msDollar[2].check
		}
	case 25:
		msDollar = msS[mspt-2 : mspt+1]
//line ms.y:173
		{
			msVAL.param = msDollar[2].param.Neg(msDollar[2].param)
		}
	case 27:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:179
		{
			msVAL.param = msDollar[1].param.Add(msDollar[1].param, msDollar[3].param)
		}
	case 28:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:183
		{
			msVAL.param = msDollar[1].param.Sub(msDollar[1].param, msDollar[3].param)
		}
	case 30:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:189
		{
			msVAL.param = msDollar[1].param.Mul(msDollar[1].param, msDollar[3].param)
		}
	case 31:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:193
		{
			msVAL.param = msDollar[1].param.Quo(msDollar[1].param, msDollar[3].param)
		}
	case 33:
		msDollar = msS[mspt-3 : mspt+1]
//line ms.y:200
		{
			msVAL.param = msDollar[2].param
		}
	}
	goto msstack /* stack new state and value */
}
